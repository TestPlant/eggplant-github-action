
name: "Eggplant Runner"
description: "Triggers a run from DAI test configuration."
inputs:
  serverURL:
    description: "The URL of Eggplant DAI server, e.g. http://localhost:8000"
    required: true
  testConfigID:
    description: "The ID of the Eggplant DAI test configuration that you want to run, e.g. 09c48b7d-fc5b-481d-af80-fcffad5d9587"
    required: true
  clientID:
    description: "The client ID to use to authenticate with the Eggplant DAI server  [default: client:dai:agent:integration]"
    required: true
    default: "client:dai:agent:integration"
  clientSecret:
    description: "The client secret to use to authenticate with the Eggplant DAI server  [env var: DAI_CLIENT_SECRET; required]"
    required: true
  requestTimeout:
    description: "The timeout in seconds for each HTTP request to the Eggplant DAI server  [default: 30]"
    required: false
    type: integer
    default: 30
  requestRetries:
    description: "The number of times to attempt each HTTP request to the Eggplant DAI server  [default: 5]"
    required: false
    type: integer
    default: 5
  backoffFactor:
    description: "The exponential backoff factor between each HTTP request  [default: 0.5]"
    required: false
    type: float
    default: 0.5
  pollInterval:
    description: "The number of seconds to wait between each call to the Eggplant DAI server  [default: 5]"
    required: false
    type: integer
    default: 5
  logLevel:
    description: "The logging level  [default: INFO]"
    required: false
    default: "INFO"
  CACertPath:
    description: "The path to an alternative Certificate Authority pem file"
    required: false
  testResultPath:
    description: "Location to store the test results generated from test configuration execution"
    required: false
  eggplantRunnerPath:
    description: "The path to eggplant runner CLI executable"
    required: false
  dryRun:
    description: "Perform a dry run only"
    required: false
    default: false
  gitlabAccessToken:
    description: "Engineering/Development only: Personal Access Token to download CLI exe from GitLab Packages."
    required: false
branding:
  icon: 'chevron-right'  
  color: 'purple'
runs:
  using: "composite"
  steps:
    - name: Setup environment variables
      run: |
        EXE_VERSION="$(echo "$DAI_VERSION" | tr [:upper:] [:lower:])"
        EXE_FILENAME=""
        if [ "$RUNNER_OS" == "Windows" ]; then
          EXE_FILENAME=eggplant-runner-Windows-$EXE_VERSION.exe
        elif [ "$RUNNER_OS" == "Linux" ]; then
          EXE_FILENAME=eggplant-runner-Linux-$EXE_VERSION
        elif [ "$RUNNER_OS" == "macOS" ]; then
          EXE_FILENAME=eggplant-runner-MacOS-$EXE_VERSION
        else
          echo "Unexpected OS: $RUNNER_OS";exit 1;
        fi
        if [ -n "${{ inputs.clientSecret }}" ]; then
          echo "DAI_CLIENT_SECRET=${{ inputs.clientSecret }}" >> $GITHUB_ENV
        fi
        echo "CLI_FILENAME=$EXE_FILENAME" >> $GITHUB_ENV
        echo "DAI_VERSION=$DAI_VERSION" >> $GITHUB_ENV
        echo "DOWNLOAD_URL=https://downloads.eggplantsoftware.com/downloads/EggplantRunner/$EXE_FILENAME" >> $GITHUB_ENV
      shell: bash
      env:
        DAI_VERSION: 6.2.1-2 # AUB-13519_CICD_Junit_file_implementation

    - name: Fetch CLI
      if: ${{ inputs.eggplantRunnerPath }}
      run: |     
          echo ">> Checking runner..."
          [[ "${{ inputs.eggplantRunnerPath }}" = *[!\ ]*  ]] || [[ "${{ inputs.eggplantRunnerPath }}" = *[\?\"\*\<\>\|]*  ]] || { echo "Error: Invalid Eggplant Runner Path" ; exit 1; }
          [ ! -r "${{ inputs.eggplantRunnerPath }}" ] && { echo "Error: No such file or permission denied. Eggplant Runner Path: ${{ inputs.eggplantRunnerPath }}"; exit 1; }
          [ -d "${{ inputs.eggplantRunnerPath }}" ] && { echo "Error: Path provided must not be a directory. Eggplant Runner Path: ${{ inputs.eggplantRunnerPath }}"; exit 1; }
         
          filename=$(basename "${{ inputs.eggplantRunnerPath }}")
          if [[ "$filename" != "$CLI_FILENAME" ]]; then
            echo "Error: File found is invalid. Required: $CLI_FILENAME. Please download from $DOWNLOAD_URL"; exit 1;
          fi
          echo "Fetching runner from ${{ inputs.eggplantRunnerPath }}"
          CLI_DIR="$RUNNER_TEMP/downloads"
          cp "${{ inputs.eggplantRunnerPath }}" $CLI_DIR
          echo "CLI_PATH=$CLI_DIR/$CLI_FILENAME" >> $GITHUB_ENV
          echo "Fetch complete."
      shell: bash

    - name: Download CLI
      if: ${{ inputs.eggplantRunnerPath == null }}
      run: |     
        echo ">> Downloading runner..."
        if [ -n "${{ inputs.gitlabAccessToken }}" ]; then
          # Engineering URL download
          CLI_DIR="$RUNNER_TEMP/downloads/eng"
          mkdir -p "$CLI_DIR"
          DOWNLOAD_URL="https://gitlab.com/api/v4/projects/22402994/packages/generic/$DAI_VERSION/0.0.0/$CLI_FILENAME"
          echo "Downloading $DOWNLOAD_URL..."
          code="$(curl --header "PRIVATE-TOKEN: ${{ inputs.gitlabAccessToken }}" --output "$CLI_DIR/$CLI_FILENAME"  --write-out %{http_code} --silent $DOWNLOAD_URL)"
          if [ $code -ne 200 ]; then
            echo "Error: Download failed. Unable to download from url: $DOWNLOAD_URL. Error details: HTTP Error $code"; exit 1;
          fi
          echo "CLI_PATH=$CLI_DIR/$CLI_FILENAME" >> $GITHUB_ENV
          echo "Download successfully."
         else
          CLI_DIR="$RUNNER_TEMP/downloads"
          if [ -f "$CLI_DIR/$CLI_FILENAME" ]; then
            echo "Runner found in default directory, skipping download."
            echo "CLI_PATH=$CLI_DIR/$CLI_FILENAME" >> $GITHUB_ENV
          else
            # Public URL download
            mkdir -p "$CLI_DIR"
            echo "Downloading $DOWNLOAD_URL..."
            code="$(curl -L $DOWNLOAD_URL --write-out %{http_code} --silent --output "$CLI_DIR/$CLI_FILENAME" )"
            if [ $code -ne 200 ]; then
              echo "Error: Download failed. Unable to download from url: $DOWNLOAD_URL. Error details: HTTP Error $code"; exit 1;
            fi
            echo "CLI_PATH=$CLI_DIR/$CLI_FILENAME" >> $GITHUB_ENV
            echo "Download successfully."
          fi
        fi
      shell: bash
        
    - name: Set permissions on Eggplant runner executable
      run: |
        chmod 0755 $CLI_PATH
      shell: bash
      
    - name: Run Eggplant DAI Test Configuration
      run: |
        [[ "${{ inputs.serverURL }}" ]] || { echo "Error: Missing server URL" ; exit 1; }
        [[ "${{ inputs.serverURL }}" = *[!\ ]*  ]] || { echo "Error: Server URL consists of empty spaces only." ; exit 1; }
        COMMANDSTR="${{ inputs.serverURL }} ${{ inputs.testConfigID }} --client-id=${{ inputs.clientID }} --request-timeout=${{ inputs.requestTimeout }} --request-retries=${{ inputs.requestRetries }} --backoff-factor=${{ inputs.backoffFactor }} --poll-interval=${{ inputs.pollInterval }} --log-level=${{ inputs.logLevel }}"

        if [ -n "${{ inputs.CACertPath }}" ]; then
          if [ ! -e "${{ inputs.CACertPath }}" ]; then
            echo "Error: Invalid CA Cert Path";  exit 1; 
          fi
          COMMANDSTR+=" --ca-cert-path=${{ inputs.CACertPath }}"
        fi
        
        if [ -n "${{ inputs.testResultPath }}" ]; then
          if [ "${{ inputs.testResultPath }}" = *[!\ ]*  ] || [[ "${{ inputs.testResultPath }}" = *[\?\"\*\<\>\|]*  ]] || [[ "${{ inputs.testResultPath }}" != *.xml ]]; then
            echo "Error: Invalid Test Result Path";  exit 1; 
          fi
          COMMANDSTR+=" --test-result-path=${{ inputs.testResultPath }}"
        fi

        if [ ${{ inputs.dryRun }} == true ]; then
          COMMANDSTR+=" --dry-run"
        fi
        
        echo "Executing: $CLI_PATH $COMMANDSTR"
        "$CLI_PATH" $COMMANDSTR
      shell: bash
